/*
 * Copyright 2020 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { BeagleAction } from 'action/types'
import { IdentifiableBeagleUIElement } from 'beagle-tree/types'
import { LocalView, RemoteView, Route } from 'beagle-view/navigator/types'

export interface AnalyticsConfig {
  /**
   * Default is `true`, when false no analytics will be generated by this system when a screen is
   * loaded.
   */
  enableScreenAnalytics?: boolean,
  /**
   * A map of actions allowed to create analytics records. By default no action creates records.
   * 
   * In this map, each key is a `_beagleAction_`, while the values are array of strings. The value
   * indicates which properties of the action will compose the analytics record. By default, only
   * the `_beagleAction_` is sent as part of the record. If we want to send for instance, the url and
   * method of every "beagle:sendRequest", we must create the entry
   * `{ 'beagle:sendRequest': ['url', 'method'] }`.
   */
  actions: Record<string, string[]>,
}

export interface AnalyticsRecord {
  type: string,
  platform: string,
  [key: string]: any,
}

export interface AnalyticsProvider {
  /**
   * Returns the configuration for the analytics. In general, this configuration will be made
   * available by the backend. So, generally speaking, this function will make an HTTP request,
   * parse the result and return it as a promise. 
   * 
   * Although this will be the general behavior, it is up to the end-developer to decide how the
   * configuration is retrieved, if he/she wants to use a configuration stored locally, there's
   * no problem.
   * 
   * @return a promise that resolves with the configuration
   */
  getConfig: () => Promise<AnalyticsConfig>,
  /**
   * Starts a session for the analytics. In general, most analytics services require you to start
   * a session with basic user data before starting to create records. This function must start
   * the session and store every key necessary to create the records themselves.
   * 
   * This function will be called as soon as Beagle starts.
   * 
   * @return a promise that resolves when the session is fully started
   */
  startSession: () => Promise<void>,
  /**
   * Calls the analytics service to create a new Record. Most analytics services will require
   * the keys obtained in `startSession` to be sent here.
   * 
   * This function will be called every time Beagle needs to create a record. If you don't want
   * to send one request for each analytics generated by Beagle, it is a good idea to implement a
   * batch mechanism within this function.
   * 
   * @param record the record to create
   */

  getMaximumItemsInQueue?: () => number,  


  createRecord: (record: AnalyticsRecord) => void,
}

export interface ActionAnalyticsConfig {
  /**
   * When `false`, no analytics record will be created for this action. When true, a record will be
   * created. No matter what `analyticsProvider.getConfig()` says.
   * 
   * When not specified, the `analyticsProvider.getConfig()` is used.
   */
  enable?: boolean,
  /**
   * The analytics record will expose all attributes of the action present in this array, no
   * matter what `analyticsProvider.getConfig()` says.
   */
  attributes?: string[],
  /**
   * Specifies additional data to be sent in the analytics record.
   */
  additionalEntries?: Record<string, any>,
}

export interface AnalyticsService {
  /**
   * Creates a screen record with the given parameters
   * @param route the route to be recorded
   * @param platform the platform in which the project is currently running
   */
  createScreenRecord: (route: LocalView | RemoteView, platform?: string) => Promise<void>,

  /**
   * Creates an action record with the given parameters
   * @param action the `BeagleAction` action to be recorded
   * @param eventName the name of the event that triggered the action
   * @param component the `IdentifiableBeagleUIElement`
   * @param beagleView the current `BeagleView`
   */
  createActionRecord: (
    action: BeagleAction, 
    eventName: string, 
    component: IdentifiableBeagleUIElement, 
    platform: string, 
    route: Route) => Promise<void>,
}
